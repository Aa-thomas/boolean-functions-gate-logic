// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/Mux16.hdl
/**
 * 16-bit multiplexor: 
 * for i = 0, ..., 15:
 * if (sel = 0) out[i] = a[i], else out[i] = b[i]
 */
CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];

    PARTS:
    // Create sel and invert it to get NotSel
    Not(in=sel , out=NotSel);

    // Bit 0
    And(a=a[0], b=NotSel , out=aAndNotSel0);
    And(a=sel, b=b[0] , out=bAndSel0 );
    Or(a=aAndNotSel0, b=bAndSel0, out=out[0]);

    // Bit 1
    And(a=a[1], b=NotSel, out=aAndNotSel1);
    And(a=sel, b=b[1], out=bAndSel1);
    Or(a=aAndNotSel1, b=bAndSel1, out=out[1]);

    // Bit 2
    And(a=a[2], b=NotSel, out=aAndNotSel2);
    And(a=sel, b=b[2], out=bAndSel2);
    Or(a=aAndNotSel2, b=bAndSel2, out=out[2]);

    // Bit 3
    And(a=a[3], b=NotSel, out=aAndNotSel3);
    And(a=sel, b=b[3], out=bAndSel3);
    Or(a=aAndNotSel3, b=bAndSel3, out=out[3]);

    // Bit 4
    And(a=a[4], b=NotSel, out=aAndNotSel4);
    And(a=sel, b=b[4], out=bAndSel4);
    Or(a=aAndNotSel4, b=bAndSel4, out=out[4]);

    // Bit 5
    And(a=a[5], b=NotSel, out=aAndNotSel5);
    And(a=sel, b=b[5], out=bAndSel5);
    Or(a=aAndNotSel5, b=bAndSel5, out=out[5]);

    // Bit 6
    And(a=a[6], b=NotSel, out=aAndNotSel6);
    And(a=sel, b=b[6], out=bAndSel6);
    Or(a=aAndNotSel6, b=bAndSel6, out=out[6]);

    // Bit 7
    And(a=a[7], b=NotSel, out=aAndNotSel7);
    And(a=sel, b=b[7], out=bAndSel7);
    Or(a=aAndNotSel7, b=bAndSel7, out=out[7]);

    // Bit 8
    And(a=a[8], b=NotSel, out=aAndNotSel8);
    And(a=sel, b=b[8], out=bAndSel8);
    Or(a=aAndNotSel8, b=bAndSel8, out=out[8]);

    // Bit 9
    And(a=a[9], b=NotSel, out=aAndNotSel9);
    And(a=sel, b=b[9], out=bAndSel9);
    Or(a=aAndNotSel9, b=bAndSel9, out=out[9]);

    // Bit 10
    And(a=a[10], b=NotSel, out=aAndNotSel10);
    And(a=sel, b=b[10], out=bAndSel10);
    Or(a=aAndNotSel10, b=bAndSel10, out=out[10]);

    // Bit 11
    And(a=a[11], b=NotSel, out=aAndNotSel11);
    And(a=sel, b=b[11], out=bAndSel11);
    Or(a=aAndNotSel11, b=bAndSel11, out=out[11]);

    // Bit 12
    And(a=a[12], b=NotSel, out=aAndNotSel12);
    And(a=sel, b=b[12], out=bAndSel12);
    Or(a=aAndNotSel12, b=bAndSel12, out=out[12]);

    // Bit 13
    And(a=a[13], b=NotSel, out=aAndNotSel13);
    And(a=sel, b=b[13], out=bAndSel13);
    Or(a=aAndNotSel13, b=bAndSel13, out=out[13]);

    // Bit 14
    And(a=a[14], b=NotSel, out=aAndNotSel14);
    And(a=sel, b=b[14], out=bAndSel14);
    Or(a=aAndNotSel14, b=bAndSel14, out=out[14]);

    // Bit 15
    And(a=a[15], b=NotSel, out=aAndNotSel15);
    And(a=sel, b=b[15], out=bAndSel15);
    Or(a=aAndNotSel15, b=bAndSel15, out=out[15]);
}